use std::env;
use std::fs::File;
use std::io::{self, Read};

fn main() -> io::Result<()> {
    let args: Vec<String> = env::args().collect();
    if args.len() != 2 {
        eprintln!("Usage: {} <file>", args[0]);
        return Ok(());
    }
    let file_path = &args[1];

    let mut file = File::open(file_path)?;
    let mut buffer = Vec::new();
    file.read_to_end(&mut bufwq!fer)?;

    let strings = find_strings(&buffer);
    analyze_strings(&strings);

    Ok(())
}

// Find ASCII
fn find_strings(buffer: &[u8]) -> Vec<String> {
    let mut strings = Vec::new();
    let mut current_string = String::new();

    for &byte in buffer {
        if byte.is_ascii_graphic() || byte == b' ' || byte == b'\t' {
            current_string.push(byte as char);
        } else if !current_string.is_empty() {
            strings.push(current_string.clone());
            current_string.clear();
        }
    }

    strings
}

fn analyze_strings(strings: &[String]) {
    println!("Identified Strings:");

    for (i, string) in strings.iter().enumerate() {
        println!("String {}: {}", i + 1, string);

    }
}
