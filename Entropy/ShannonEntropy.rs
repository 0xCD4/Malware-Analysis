use std::env;
use std::fs::File;
use std::io::{BufReader, Read};

const WHITE: &str = "\x1B[37m";
const RESET: &str = "\x1B[0m";

fn shannon_entropy(filename: &str) -> f64 {
    let file = File::open(filename).expect("Error opening file");
    let mut reader = BufReader::new(file);
    let mut content = Vec::new();
    reader.read_to_end(&mut content).expect("Error reading file");

    let mut freq = [0; 256];
    let total_byte = content.len() as f64;

    for &byte in &content {
        freq[byte as usize] += 1;
    }

    let mut entropy = 0.0;
    for &count in &freq {
        if count > 0 {
            let prob = count as f64 / total_byte;
            entropy -= prob * prob.log2();
        }
    }

    entropy
}

fn main() {
    let args: Vec<String> = env::args().collect();

    if args.len() != 2 {
        eprintln!("Usage: {} <file-name>", args[0]);
        std::process::exit(1);
    }

    let filename = &args[1];
    let entropy = shannon_entropy(filename);

    if entropy >= 0.0 {
        println!("{}Entropy of {}: {:.5}{}", WHITE, filename, entropy, RESET);
    }
}
